from flask import Flask, render_template, redirect
from flask_login import LoginManager, login_user
from flask_restful import Api

# import mars_api
import user_resources
from data import db_session
from data.users import User
from forms.user import RegisterForm, LoginForm

app = Flask(__name__)
api = Api(app)
login_manager = LoginManager()
login_manager.init_app(app)
app.config['SECRET_KEY'] = 'glory to NSSA'


def figurates(phrase: str, words: type([]) | set):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –ª–∏ –∫–∞–∫–∞—è-–ª–∏–±–æ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        phrase: —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.
        words: —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è –≤ —Å—Ç—Ä–æ–∫–µ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        True –∏–ª–∏ False, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–∞—è-–ª–∏–±–æ —Å—Ç—Ä–æ–∫–∞ –≤ phrase.
    """
    for i in words:
        if i in phrase:
            return True
    return False


@login_manager.user_loader
def load_user(user_id):
    db_sess = db_session.create_session()
    return db_sess.query(User).get(user_id)


@app.route('/')
@app.route('/index')
def index():
    params = {'title': "–ì–ª–∞–≤–Ω–∞—è"}
    return render_template('base.html', **params)


@app.route('/list_prof/<list>')
def list_prof(list: str):
    with open('worker manifest.txt', 'r', encoding='UTF-8') as f:
        worker_list = f.read().split('\n')
    params = {'title': '–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞',
              'list': list,
              'workers': worker_list}
    return render_template('list_profs.html', **params)


@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        if form.password.data != form.password_again.data:
            return render_template('register.html', title='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                                   form=form,
                                   message="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        db_sess = db_session.create_session()
        if db_sess.query(User).filter(User.email == form.email.data).first():
            return render_template('register.html', title='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                                   form=form,
                                   message="–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å")
        user = User(
            name=form.name.data,
            email=form.email.data
        )
        user.set_password(form.password.data)
        db_sess.add(user)
        db_sess.commit()
        return redirect('/login')
    return render_template('register.html', title='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', form=form)


@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        db_sess = db_session.create_session()
        user = db_sess.query(User).filter(User.email == form.email.data).first()
        print(user.name)
        if user and user.check_password(form.password.data):
            login_user(user, remember=form.remember_me.data)
            return redirect("/")
        return render_template('login.html',
                               message="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
                               form=form)
    return render_template('login.html', title='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', form=form)


@app.route('/training/<path>')
def training(path: str):
    param = {}
    param['title'] = "–ö–∞–±–∏–Ω–µ—Ç—ã"
    deck = '–ü–∞–ª—É–±–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ü§ñ'

    if figurates(path.lower(), ['–ª–æ–≥', '–∞—Ç—Ä', '–µ–≤—Ç']):
        deck = '–õ–∞–∑–∞—Ä–µ—Ç'
        param['image'] = '/static/img/morg.png'
    if figurates(path.lower(), ['—É—Ä–≥', '–ø–∞—Ç']):
        deck = '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è'
        param['image'] = '/static/img/operational.png'  # –ù–∞–¥–æ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
    param['train_site'] = deck
    return render_template('training.html', **param)


if __name__ == '__main__':
    api.add_resource(user_resources.UserListResource, '/api/v2/users')
    api.add_resource(user_resources.UsersResource, '/api/v2/users/<int:user_id>')
    db_session.global_init("db/mars_explorer.db")
    # app.register_blueprint(mars_api.blueprint)
    app.run(port='8080', host='127.0.0.1')
